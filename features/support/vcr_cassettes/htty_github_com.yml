--- 
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :get
    uri: http://htty.github.com:80/
    body: 
    headers: 
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 200
      message: OK
    headers: 
      expires: 
      - Wed, 02 Mar 2011 09:18:58 GMT
      last-modified: 
      - Fri, 25 Feb 2011 07:47:44 GMT
      connection: 
      - keep-alive
      content-type: 
      - text/html
      server: 
      - nginx/0.7.67
      date: 
      - Tue, 01 Mar 2011 09:18:58 GMT
      content-length: 
      - "17827"
      cache-control: 
      - max-age=86400
      accept-ranges: 
      - bytes
    body: "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\
      <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <meta name=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\
      <title>htty, the HTTP TTY</title>\n\
      <link rel=\"stylesheet\" href=\"css/style.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" />\n\
      <link rel=\"stylesheet\" href=\"css/common.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" />\n\n\
      <script type=\"text/javascript\" charset=\"utf-8\">\n  relpath = '';\n  if (relpath != '') relpath += '/';\n\
      </script>\n\
      <script type=\"text/javascript\" charset=\"utf-8\" src=\"js/jquery.js\"></script>\n\
      <script type=\"text/javascript\" charset=\"utf-8\" src=\"js/app.js\"></script>\n\n  </head>\n  <body>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n      if (window.top.frames.main) document.body.className = 'frames';\n    </script>\n    \n    <div id=\"header\">\n      <div id=\"menu\">\n  \n    <a href=\"_index.html\" title=\"Index\">Index</a> &raquo; \n    <span class=\"title\">File: README</span>\n  \n  \n  <div class=\"noframes\"><span class=\"title\">(</span><a href=\".\" target=\"_top\">no frames</a><span class=\"title\">)</span></div>\n\
      </div>\n\n      <div id=\"search\">\n  <a id=\"class_list_link\" href=\"#\">Class List</a>\n  <a id=\"method_list_link\" href=\"#\">Method List</a>\n  <a id =\"file_list_link\" href=\"#\">File List</a>\n\
      </div>\n\n      <div class=\"clear\"></div>\n    </div>\n    \n    <iframe id=\"search_frame\"></iframe>\n    \n    <div id=\"content\"><div id='filecontents'><pre class=\"code\">                 <span class='s identifier id'>s</span>         <span class='s identifier id'>s</span>\n  <span class='dot token'>.</span><span class='uef identifier id'>uef</span><span class='bitxor op'>^</span><span class='string val'>&quot;        :8        :8      ..\n\
      :d88E          .88       .88     @L\n\
      `888E         :888ooo   :888ooo 9888i   .dL\n 888E .z8k -*8888888 -*8888888 `Y888k:*888.\n 888E~?888L  8888      8888      888E  888I\n 888E  888E  8888      8888      888E  888I\n 888E  888E  8888      8888      888E  888I\n 888E  888E .8888Lu=  .8888Lu=   888E  888I\n 888E  888E ^%888*    ^%888*    x888N&gt;&lt;888'\n\
      m888N= 888&gt;   'Y&quot;</span>       <span class='string val'>'Y&quot;      &quot;88&quot;  888\n `Y&quot;   888   __  .__                  88F\n      J88&quot; _/  |_|  |__   ____       98&quot;\n      @%   \\   __\\  |  \\_/ __ \\    ./&quot;\n    :&quot;      |  | |   Y  \\  ___/   ~`\n            |__| |___|  /\\___  &gt;\n            __________\\/_____\\/____________________\n           /   |   \\__    ___/\\__    ___/\\______   \\\n          /    ~    \\|    |     |    |    |     ___/\n          \\    Y    /|    |     |    |    |    |\n           \\___|_  / |____|     |____|    |____|\n           ______\\/___________________.___.\n           \\__    ___/\\__    ___/\\__  |   |\n             |    |     |    |    /   |   |\n             |    |     |    |    \\____   |\n             |____|     |____|    / ______|\n                                  \\/\n\
      </span></pre>\n\n\
      <p><a href=\"http://htty.github.com\">htty</a> is a console application for interacting with web servers. It\xE2\x80\x99s a fun way to explore web APIs and to learn the ins and outs of HTTP.</p>\n\n\
      <p>See what\xE2\x80\x99s changed lately by reading the <a href=\"http://htty.github.com/file.History.html\">project history</a>. <a href=\"http://flattr.com/thing/68277/htty-the-HTTP-TTY\" title=\"Flattr this\"><img src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" alt=\"Flattr this\" /></a></p>\n\n\
      <h1><a name=\"installation\"></a>Installation</h1>\n\n\
      <p>It couldn\xE2\x80\x99t be much easier.</p>\n\n\
      <pre class=\"code\">$ <span class='gem identifier id'>gem</span> <span class='install identifier id'>install</span> <span class='htty identifier id'>htty</span>\n\
      </pre>\n\n\
      <p>You\xE2\x80\x99ll need Ruby and RubyGems. It\xE2\x80\x99s known to work well under OS X against Ruby v1.8.7 and v1.9.2.</p>\n\n\
      <h1><a name=\"features\"></a>Features</h1>\n\n\
      <ul>\n\
      <li>Intuitive, Tab-completed commands and command aliases</li>\n\
      <li>Support for familiar HTTP methods <em>GET</em>, <em>POST</em>, <em>PUT</em>, and <em>DELETE</em>, as well as <em>HEAD</em>, <em>OPTIONS</em> and <em>TRACE</em></li>\n\
      <li>Support for HTTP Secure connections and HTTP Basic Authentication</li>\n\
      <li>Automatic URL-encoding of userinfo, paths, query-string parameters, and page fragments</li>\n\
      <li>Transcripts, both verbose and summary</li>\n\
      <li>Scripting via <em>stdin</em></li>\n\
      <li>Dead-simple cookie handling and redirect following</li>\n\
      <li>Built-in help</li>\n\
      </ul>\n\n\n\
      <p>The things you can do with <em>htty</em> are:</p>\n\n\
      <ul>\n\
      <li><strong>Build a request</strong> \xE2\x80\x94 you can tweak the address, headers, cookies, and body at will</li>\n\
      <li><strong>Send the request to the server</strong> \xE2\x80\x94 after the request is sent, it remains unchanged in your session history</li>\n\
      <li><strong>Inspect the server\xE2\x80\x99s response</strong> \xE2\x80\x94 you can look at the status, headers, cookies, and body in various ways</li>\n\
      <li><strong>Review history</strong> \xE2\x80\x94 a normal and a verbose transcript of your session are available at all times (destroyed when you quit <em>htty</em>)</li>\n\
      <li><strong>Reuse previous requests</strong> \xE2\x80\x94 you can refer to prior requests and copy them</li>\n\
      </ul>\n\n\n\
      <h1><a name=\"examples\"></a>Examples</h1>\n\n\
      <p>Here are a few annotated <em>htty</em> session transcripts to get you started.</p>\n\n\
      <h2><a name=\"basic-example\"></a>Querying a web service</h2>\n\n\
      <p>This simple example shows how to explore a read-only web service with <em>htty</em>.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/esvapi1.png\" alt=\"ESV Bible Web Service example #1\" /></p>\n\n\
      <p>You can point <em>htty</em> at a complete or partial web URL. If you don\xE2\x80\x99t supply a URL, http://0.0.0.0/ (port 80) will be used. You can vary the protocol scheme, userinfo, host, port, path, query string, and fragment as you wish.</p>\n\n\
      <p>The <em>htty</em> shell prompt shows the address of the current request.</p>\n\n\
      <p>The <code>get</code> command is one of seven HTTP request methods supported. A concise summary of the response is shown when you issue a request.</p>\n\n\
      <p>You can follow redirects using the <code>follow</code> command. No request is made until you type a request command such as <code>get</code> or <code>post</code>.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/esvapi2.png\" alt=\"ESV Bible Web Service example #2\" /></p>\n\n\
      <p>You can tweak segments of the address at will. Here we are navigating the site\xE2\x80\x99s path hierarchy, which you can do with relative as well as absolute pathspecs.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/esvapi3.png\" alt=\"ESV Bible Web Service example #3\" /></p>\n\n\
      <p>Here we add query-string parameters. Notice that characters that require URL encoding are automatically URL-encoded (unless they are part of a URL-encoded expression).</p>\n\n\
      <p>The <code>headers-response</code> and <code>body-response</code> commands reveal the details of a response.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/esvapi4.png\" alt=\"ESV Bible Web Service example #4\" /></p>\n\n\
      <p>There was some cruft in the web service\xE2\x80\x99s response (a horizontal line, a passage reference, verse numbers, a copyright stamp, and line breaks). We eliminate it by using API options provided by the web service we\xE2\x80\x99re talking to.</p>\n\n\
      <p>We do a Julia Child maneuver and use the <code>address</code> command to change the entire URL, rather than add individual query-string parameters one by one.</p>\n\n\
      <p>Exit your session at any time by typing <code>quit</code>.</p>\n\n\
      <h2><a name=\"cookies-example\"></a>Working with cookies</h2>\n\n\
      <p>The next example demonstrates <em>htty</em>\xE2\x80\x99s HTTP Secure support and cookies features, as well as how to review and revisit past requests.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/google1.png\" alt=\"Google example #1\" /></p>\n\n\
      <p>The <em>https://</em> scheme and port 443 imply each other, just as the <em>http://</em> scheme and port 80 imply each other. If you omit the scheme or the port, it will default to the appropriate value.</p>\n\n\
      <p>Notice that when cookies are offered in a response, a bold asterisk (it looks like a cookie) appears in the response summary. The same cookie symbol appears next to the <em>Set-Cookie</em> header when you display response headers.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/google2.png\" alt=\"Google example #2\" /></p>\n\n\
      <p>The <code>cookies-use</code> command copies cookies out of the response into the next request. The cookie symbol appears next to the <em>Cookie</em> header when you display request headers.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/google3.png\" alt=\"Google example #3\" /></p>\n\n\
      <p>An abbreviated history is available through the <code>history</code> command. Information about requests in the history includes request method, URL, number of headers (and a cookie symbol, if cookies were sent), and the size of the body. Information about responses in the history includes response code, number of headers (and a cookie symbol, if cookies were received), and the size of the body.</p>\n\n\
      <p>Note that history contains only numbered HTTP request and response pairs, not a record of all the commands you enter.</p>\n\n\
      <p>The <code>reuse</code> command makes a copy of the headers and body of an earlier request for you to build on.</p>\n\n\
      <h2><a name=\"history-example\"></a>Understanding complex HTTP conversations at a glance using history</h2>\n\n\
      <p>Now we\xE2\x80\x99ll look at <em>htty</em>\xE2\x80\x99s HTTP Basic Authentication support and learn how to display unabbreviated transcripts of <em>htty</em> sessions.</p>\n\n\
      <p>Assume that we have the following Sinatra application listening on Sinatra\xE2\x80\x99s default port, 4567.</p>\n\n\
      <pre class=\"code\"><span class='require identifier id'>require</span> <span class='string val'>'sinatra'</span>\n\n\
      <span class='get identifier id'>get</span> <span class='string val'>'/all-good'</span> <span class='do do kw'>do</span>\n  <span class='lbrack token'>[</span><span class='integer val'>200</span><span class='comma token'>,</span> <span class='lbrack token'>[</span><span class='lbrack token'>[</span><span class='string val'>'Set-Cookie'</span><span class='comma token'>,</span> <span class='string val'>'foo=bar; baz'</span><span class='rbrack token'>]</span><span class='rbrack token'>]</span><span class='comma token'>,</span> <span class='string val'>'Hello World!'</span><span class='rbrack token'>]</span>\n\
      <span class='end end kw'>end</span>\n\n\
      <span class='put identifier id'>put</span> <span class='string val'>'/huh'</span> <span class='do do kw'>do</span>\n  <span class='lbrack token'>[</span><span class='integer val'>404</span><span class='comma token'>,</span> <span class='string val'>'What?'</span><span class='rbrack token'>]</span>\n\
      <span class='end end kw'>end</span>\n\n\
      <span class='delete identifier id'>delete</span> <span class='string val'>'/hurl'</span> <span class='do do kw'>do</span>\n  <span class='lbrack token'>[</span><span class='integer val'>500</span><span class='comma token'>,</span> <span class='string val'>'Barf!'</span><span class='rbrack token'>]</span>\n\
      <span class='end end kw'>end</span>\n\n\
      <span class='post identifier id'>post</span> <span class='string val'>'/submit-novel'</span> <span class='do do kw'>do</span>\n  <span class='redirect identifier id'>redirect</span> <span class='string val'>'/all-good'</span>\n\
      <span class='end end kw'>end</span>\n\
      </pre>\n\n\
      <p>This application expects <em>GET</em> and <em>POST</em> requests and responds in various contrived ways.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/sinatra1.png\" alt=\"Sinatra application example #1\" /></p>\n\n\
      <p>When you change the userinfo portion of the address, or the entire address, the appropriate HTTP Basic Authentication header is created for you automatically. Notice that characters that require URL encoding are automatically URL-encoded (unless they are part of a URL-encoded expression).</p>\n\n\
      <p>When userinfo is supplied in a request, a bold mercantile symbol (<em>@</em>) appears next to the resulting <em>Authorization</em> header when you display request headers (see below).</p>\n\n\
      <p>Type <code>body-set</code> to enter body data, and terminate it by typing Return three times consecutively. The body will only be sent for <em>POST</em> and <em>PUT</em> requests. The appropriate <em>Content-Length</em> header is created for you automatically (see below).</p>\n\n\
      <p>Different response codes are rendered with colors that suggest their meaning:</p>\n\n\
      <ul>\n\
      <li>Response codes between 200 and 299 appear <span style=\"background-color: green; color: black; font-weight: bold; padding: 0 0.25em 0 0.25em;\">black on green</span> to indicate success</li>\n\
      <li>Response codes between 300 and 399 appear <span style=\"background-color: darkblue; color: white; font-weight: bold; padding: 0 0.25em 0 0.25em;\">white on blue</span> to indicate redirection</li>\n\
      <li>Response codes between 400 and 499 appear <span style=\"background-color: darkred; color: white; font-weight: bold; padding: 0 0.25em 0 0.25em;\">white on red</span> to indicate failure</li>\n\
      <li>Response codes between 500 and 599 appear <span style=\"background-color: yellow; color: black; font-weight: bold; padding: 0 0.25em 0 0.25em; text-decoration: blink;\">flashing black on yellow</span> to indicate a server error</li>\n\
      </ul>\n\n\n\
      <p><img src=\"http://htty.github.com/images/sinatra2.png\" alt=\"Sinatra application example #2\" /></p>\n\n\
      <p>As with the abbreviated history demonstrated earlier, verbose history shows a numbered list of requests and the responses they elicited. All information exchanged between client and server is shown.</p>\n\n\
      <h2><a name=\"help\"></a>Getting help</h2>\n\n\
      <p>You can learn how to use <em>htty</em> commands from within <em>htty</em>.</p>\n\n\
      <p><img src=\"http://htty.github.com/images/help.png\" alt=\"htty\xE2\x80\x99s built-in help\" /></p>\n\n\
      <p>The <code>help</code> command takes an optional argument of the abbreviated or full name of a command.</p>\n\n\
      <h1><a name=\"coming-soon\"></a>Coming soon</h1>\n\n\
      <p>Here are some features that are coming down the pike.</p>\n\n\
      <h2><a name=\"forms-coming-soon\"></a>Commands for streamlining web form submission</h2>\n\n\
      <p>These features will make <em>htty</em> better at screen-scraping.</p>\n\n\
      <p>Using any of the forthcoming <code>form</code> commands will clear any non-form content in the body of the request. Adding at least one URL-encoded form parameter to the request will set the <em>Content-Type</em> header to <em>application/x-www-form-urlencoded</em>. Removing all URL-encoded form parameters will remove this header.</p>\n\n\
      <ul>\n\
      <li><code>form</code> \xE2\x80\x94 display all form parameters offered in the response</li>\n\
      <li><code>form-fill</code> \xE2\x80\x94 prompt in turn for a value for each of the form inputs in the response</li>\n\
      <li><code>form-add <em>name</em> <em>value</em></code> \xE2\x80\x94 add a URL-encoded form parameter for the request, using the specified name and value</li>\n\
      <li><code>form-remove <em>name</em></code> \xE2\x80\x94 remove a URL-encoded form parameter from the request, using the specified name</li>\n\
      <li><code>form-remove-all</code> \xE2\x80\x94 remove all URL-encoded form parameters from the request</li>\n\
      </ul>\n\n\n\
      <p>You will also be able to pop open a browser window containing request and response bodies.</p>\n\n\
      <h2><a name=\"custom-aliases-coming-soon\"></a>Custom command aliases and shell emulation of <em>http-console</em></h2>\n\n\
      <p>You should be able to make your own command aliases.</p>\n\n\
      <p><em>http-console</em> has a nice command-line. We should have an <em>http-console</em> skin for <em>htty</em>.</p>\n\n\
      <h1><a name=\"contributing\"></a>Contributing</h1>\n\n\
      <p>Report defects and feature requests on <a href=\"http://github.com/htty/htty/issues\">GitHub Issues</a>.</p>\n\n\
      <p>Your patches are welcome, and you will receive attribution here for good stuff. Fork <a href=\"http://github.com/htty/htty\" title=\"htty\xE2\x80\x99s \xE2\x80\x98htty\xE2\x80\x99 repository at GitHub\">the official <em>htty</em> repository</a> and send a pull request.</p>\n\n\
      <h1><a name=\"contact\"></a>News and information</h1>\n\n\
      <p>Stay in touch with the <em>htty</em> project by following <a href=\"http://twitter.com/get_htty\" title=\"get_htty at Twitter\">@get_htty</a> on Twitter.</p>\n\n\
      <p>You can also get help in the <a href=\"http://webchat.freenode.net/?channels=htty\">#htty channel on Freenode</a>.</p>\n\n\
      <h1><a name=\"credits\"></a>Credits <a href=\"http://flattr.com/thing/68277/htty-the-HTTP-TTY\" title=\"Flattr this\"><img src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" alt=\"Flattr this\" /></a></h1>\n\n\
      <p>The author, <a href=\"mailto:htty@nilsjonsson.com\">Nils Jonsson</a>, owes a debt of inspiration to the <a href=\"http://github.com/cloudhead/http-console\"><em>http-console</em></a> project.</p>\n\n\
      <p>Thanks to <a href=\"http://github.com/htty/htty/contributors\" title=\"htty contributors at GitHub\">contributors</a> (in alphabetical order):</p>\n\n\
      <ul>\n\
      <li>Rob Dawson (ephox-rob/<a href=\"http://github.com/rojotek\" title=\"rojotek at GitHub\">rojotek</a>)</li>\n\
      <li>Bo Frederiksen (<a href=\"http://github.com/bofrede\" title=\"bofrede at GitHub\">bofrede</a>)</li>\n\
      <li>Johannes Gorset (<a href=\"http://github.com/jgorset\" title=\"jgorset at GitHub\">jgorset</a>)</li>\n\
      <li>Carson McDonald (<a href=\"http://github.com/carsonmcdonald\" title=\"carsonmcdonald at GitHub\">carsonmcdonald</a>)</li>\n\
      <li>Sam Nguyen (<a href=\"http://github.com/dtjm\" title=\"dtjm at GitHub\">dtjm</a>)</li>\n\
      <li>Robert Pitts (<a href=\"http://github.com/rbxbx\" title=\"rbxbx at GitHub\">rbxbx</a>)</li>\n\
      <li>Matt Sanders (<a href=\"http://github.com/mattsa\" title=\"mattsa at GitHub\">mattsa</a>)</li>\n\
      </ul>\n\n\n\
      <h1><a name=\"license\"></a>License</h1>\n\n\
      <p>Released under the <a href=\"http://htty.github.com/file.MIT-LICENSE.html\">MIT License</a>.</p></div></div>\n    \n    <div id=\"footer\">\n  Generated on Fri Feb 25 01:41:21 2011 by \n  <a href=\"http://yardoc.org\" title=\"Yay! A Ruby Documentation Tool\" target=\"_parent\">yard</a>\n  0.6.4 (ruby-1.8.7).\n\
      </div>\n\n  </body>\n\
      </html>"
    http_version: "1.1"
