{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"htty, the HTTP TTY","body":"\r\n                     s         s\r\n      .uef^\"        :8        :8      ..\r\n    :d88E          .88       .88     @L\r\n    `888E         :888ooo   :888ooo 9888i   .dL\r\n     888E .z8k -*8888888 -*8888888 `Y888k:*888.\r\n     888E~?888L  8888      8888      888E  888I\r\n     888E  888E  8888      8888      888E  888I\r\n     888E  888E  8888      8888      888E  888I\r\n     888E  888E .8888Lu=  .8888Lu=   888E  888I\r\n     888E  888E ^%888*    ^%888*    x888N><888'\r\n    m888N= 888>   'Y\"       'Y\"      \"88\"  888\r\n     `Y\"   888   __  .__                  88F\r\n          J88\" _/  |_|  |__   ____       98\"\r\n          @%   \\   __\\  |  \\_/ __ \\    ./\"\r\n        :\"      |  | |   Y  \\  ___/   ~`\r\n                |__| |___|  /\\___  >\r\n                __________\\/_____\\/____________________\r\n               /   |   \\__    ___/\\__    ___/\\______   \\\r\n              /    ~    \\|    |     |    |    |     ___/\r\n              \\    Y    /|    |     |    |    |    |\r\n               \\___|_  / |____|     |____|    |____|\r\n               ______\\/___________________.___.\r\n               \\__    ___/\\__    ___/\\__  |   |\r\n                 |    |     |    |    /   |   |\r\n                 |    |     |    |    \\____   |\r\n                 |____|     |____|    / ______|\r\n                                      \\/\r\n\r\n[<img align=\"right\" src=\"https://codeclimate.com/badge.png\" title=\"Code Climate report\" />](http://codeclimate.com/github/htty/htty) [<img align=\"right\" src=\"https://gemnasium.com/htty/htty.png\" title=\"Gemnasium build status\" />](http://gemnasium.com/htty/htty) [<img align=\"right\" src=\"https://secure.travis-ci.org/htty/htty.png?branch=master\" title=\"Travis CI build status\" />](http://travis-ci.org/htty/htty) [htty](http://htty.github.com) is a console application for interacting with web servers. It’s a fun way to explore web APIs and to learn the ins and outs of HTTP.\r\n\r\nSee what’s changed lately by reading the [project history](http://htty.github.com/file.History.html).\r\n\r\n<a name=\"installation\"></a>Installation\r\n=======================================\r\n\r\nIt couldn’t be much easier.\r\n\r\n    $ gem install htty\r\n\r\nYou’ll need Ruby and RubyGems. It’s known to work well under OS X against Ruby v1.8.7 and v1.9.2.\r\n\r\n<a name=\"features\"></a>Features\r\n===============================\r\n\r\n* Intuitive, Tab-completed commands and command aliases\r\n* Support for familiar HTTP methods _GET_, _POST_, _PUT_, and _DELETE_, as well as _PATCH_, _HEAD_, _OPTIONS_ and _TRACE_\r\n* Support for HTTP Secure connections and HTTP Basic Authentication\r\n* Automatic URL-encoding of userinfo, paths, query-string parameters, and page fragments\r\n* Transcripts, both verbose and summary\r\n* Scripting via _stdin_\r\n* Dead-simple cookie handling and redirect following\r\n* Built-in help\r\n\r\nThe things you can do with _htty_ are:\r\n\r\n* **Build a request** — you can tweak the address, headers, cookies, and body at will\r\n* **Send the request to the server** — after the request is sent, it remains unchanged in your session history\r\n* **Inspect the server’s response** — you can look at the status, headers, cookies, and body in various ways\r\n* **Review history** — a normal and a verbose transcript of your session are available at all times (destroyed when you quit _htty_)\r\n* **Reuse previous requests** — you can refer to prior requests and copy them\r\n\r\n<a name=\"examples\"></a>Examples\r\n===============================\r\n\r\nHere are a few annotated _htty_ session transcripts to get you started.\r\n\r\n<a name=\"basic-example\"></a>Querying a web service\r\n--------------------------------------------------\r\n\r\nThis simple example shows how to explore a read-only web service with _htty_.\r\n\r\n![ESV Bible Web Service example #1](http://htty.github.com/images/esvapi1.png)\r\n\r\nYou can point _htty_ at a complete or partial web URL. If you don’t supply a URL, http://0.0.0.0/ (port 80) will be used. You can vary the protocol scheme, userinfo, host, port, path, query string, and fragment as you wish.\r\n\r\nThe _htty_ shell prompt shows the address of the current request.\r\n\r\nThe `get` command is one of seven HTTP request methods supported. A concise summary of the response is shown when you issue a request.\r\n\r\nYou can follow redirects using the `follow` command. No request is made until you type a request command such as `get` or `post`.\r\n\r\n![ESV Bible Web Service example #2](http://htty.github.com/images/esvapi2.png)\r\n\r\nYou can tweak segments of the address at will. Here we are navigating the site’s path hierarchy, which you can do with relative as well as absolute pathspecs.\r\n\r\n![ESV Bible Web Service example #3](http://htty.github.com/images/esvapi3.png)\r\n\r\nHere we add query-string parameters. Notice that characters that require URL encoding are automatically URL-encoded (unless they are part of a URL-encoded expression).\r\n\r\nThe `headers-response` and `body-response` commands reveal the details of a response.\r\n\r\n![ESV Bible Web Service example #4](http://htty.github.com/images/esvapi4.png)\r\n\r\nThere was some cruft in the web service’s response (a horizontal line, a passage reference, verse numbers, a copyright stamp, and line breaks). We eliminate it by using API options provided by the web service we’re talking to.\r\n\r\nWe do a Julia Child maneuver and use the `address` command to change the entire URL, rather than add individual query-string parameters one by one.\r\n\r\nExit your session at any time by typing `quit` or hitting Ctrl-D.\r\n\r\n<a name=\"cookies-example\"></a>Working with cookies\r\n--------------------------------------------------\r\n\r\nThe next example demonstrates <i>htty</i>’s HTTP Secure support and cookies features, as well as how to review and revisit past requests.\r\n\r\n![Google example #1](http://htty.github.com/images/google1.png)\r\n\r\nThe _https://_ scheme and port 443 imply each other, just as the _http://_ scheme and port 80 imply each other. If you omit the scheme or the port, it will default to the appropriate value.\r\n\r\nNotice that when cookies are offered in a response, a bold asterisk (it looks like a cookie) appears in the response summary. The same cookie symbol appears next to the _Set-Cookie_ header when you display response headers.\r\n\r\n![Google example #2](http://htty.github.com/images/google2.png)\r\n\r\nThe `cookies-use` command copies cookies out of the response into the next request. The cookie symbol appears next to the _Cookie_ header when you display request headers.\r\n\r\n![Google example #3](http://htty.github.com/images/google3.png)\r\n\r\nAn abbreviated history is available through the `history` command. Information about requests in the history includes request method, URL, number of headers (and a cookie symbol, if cookies were sent), and the size of the body. Information about responses in the history includes response code, number of headers (and a cookie symbol, if cookies were received), and the size of the body.\r\n\r\nNote that history contains only numbered HTTP request and response pairs, not a record of all the commands you enter.\r\n\r\nThe `reuse` command makes a copy of the headers and body of an earlier request for you to build on.\r\n\r\n<a name=\"history-example\"></a>Understanding complex HTTP conversations at a glance using history\r\n------------------------------------------------------------------------------------------------\r\n\r\nNow we’ll look at <i>htty</i>’s HTTP Basic Authentication support and learn how to display unabbreviated transcripts of _htty_ sessions.\r\n\r\nAssume that we have the following Sinatra application listening on Sinatra’s default port, 4567.\r\n\r\n    require 'sinatra'\r\n\r\n    get '/all-good' do\r\n      [200, [['Set-Cookie', 'foo=bar; baz']], 'Hello World!']\r\n    end\r\n\r\n    put '/huh' do\r\n      [404, 'What?']\r\n    end\r\n\r\n    delete '/hurl' do\r\n      [500, 'Barf!']\r\n    end\r\n\r\n    post '/submit-novel' do\r\n      redirect '/all-good'\r\n    end\r\n\r\nThis application expects _GET_ and _POST_ requests and responds in various contrived ways.\r\n\r\n![Sinatra application example #1](http://htty.github.com/images/sinatra1.png)\r\n\r\nWhen you change the userinfo portion of the address, or the entire address, the appropriate HTTP Basic Authentication header is created for you automatically. Notice that characters that require URL encoding are automatically URL-encoded (unless they are part of a URL-encoded expression).\r\n\r\nWhen userinfo is supplied in a request, a bold mercantile symbol (_@_) appears next to the resulting _Authorization_ header when you display request headers (see below).\r\n\r\nType `body-set` to enter body data, and terminate it by entering two consecutive blank lines, or by hitting Ctrl-D. The body will only be sent for _POST_ and _PUT_ requests. The appropriate _Content-Length_ header is created for you automatically (see below).\r\n\r\nDifferent response codes are rendered with colors that suggest their meaning:\r\n\r\n* Response codes between 200 and 299 appear <span style=\"background-color: green; color: black; font-weight: bold; padding: 0 0.25em 0 0.25em;\">black on green</span> to indicate success\r\n* Response codes between 300 and 399 appear <span style=\"background-color: darkblue; color: white; font-weight: bold; padding: 0 0.25em 0 0.25em;\">white on blue</span> to indicate redirection\r\n* Response codes between 400 and 499 appear <span style=\"background-color: darkred; color: white; font-weight: bold; padding: 0 0.25em 0 0.25em;\">white on red</span> to indicate failure\r\n* Response codes between 500 and 599 appear <span style=\"background-color: yellow; color: black; font-weight: bold; padding: 0 0.25em 0 0.25em; text-decoration: blink;\">flashing black on yellow</span> to indicate a server error\r\n\r\n![Sinatra application example #2](http://htty.github.com/images/sinatra2.png)\r\n\r\nAs with the abbreviated history demonstrated earlier, verbose history shows a numbered list of requests and the responses they elicited. All information exchanged between client and server is shown.\r\n\r\n<a name=\"help\"></a>Getting help\r\n-------------------------------\r\n\r\nYou can learn how to use _htty_ commands from within _htty_.\r\n\r\n![htty’s built-in help](http://htty.github.com/images/help.png)\r\n\r\nThe `help` command takes an optional argument of the abbreviated or full name of a command.\r\n\r\n<a name=\"coming-soon\"></a>Coming soon\r\n=====================================\r\n\r\nHere are some features that are coming down the pike.\r\n\r\n<a name=\"forms-coming-soon\"></a>Commands for streamlining web form submission\r\n-----------------------------------------------------------------------------\r\n\r\nThese features will make _htty_ better at screen-scraping.\r\n\r\nUsing any of the forthcoming `form` commands will clear any non-form content in the body of the request. Adding at least one URL-encoded form parameter to the request will set the _Content-Type_ header to _application/x-www-form-urlencoded_. Removing all URL-encoded form parameters will remove this header.\r\n\r\n* `form` — display all form parameters offered in the response\r\n* `form-fill` — prompt in turn for a value for each of the form inputs in the response\r\n* <code>form-add _name_ _value_</code> — add a URL-encoded form parameter for the request, using the specified name and value\r\n* <code>form-remove _name_</code> — remove a URL-encoded form parameter from the request, using the specified name\r\n* `form-remove-all` — remove all URL-encoded form parameters from the request\r\n\r\nYou will also be able to pop open a browser window containing request and response bodies.\r\n\r\n<a name=\"custom-aliases-coming-soon\"></a>Custom command aliases and shell emulation of _http-console_\r\n-----------------------------------------------------------------------------------------------------\r\n\r\nYou should be able to make your own command aliases.\r\n\r\n_http-console_ has a nice command-line. We should have an _http-console_ skin for _htty_.\r\n\r\n<a name=\"contributing\"></a>Contributing\r\n=======================================\r\n\r\nReport defects and feature requests on [GitHub Issues](http://github.com/htty/htty/issues).\r\n\r\nYour patches are welcome, and you will receive attribution here for good stuff. Fork [the official _htty_ repository](http://github.com/htty/htty \"htty’s ‘htty’ repository at GitHub\") and send a pull request.\r\n\r\n<a name=\"contact\"></a>News and information\r\n==========================================\r\n\r\nStay in touch with the _htty_ project by following [@get_htty](http://twitter.com/get_htty \"get_htty at Twitter\") on Twitter.\r\n\r\nYou can also get help in the [#htty channel on Freenode](http://webchat.freenode.net/?channels=htty).\r\n\r\n<a name=\"credits\"></a>Credits\r\n=============================\r\n\r\nThe author, [Nils Jonsson](mailto:htty@nilsjonsson.com), owes a debt of inspiration to the [_http-console_](http://github.com/cloudhead/http-console) project.\r\n\r\nThanks to [contributors](http://github.com/htty/htty/contributors \"htty contributors at GitHub\") (in alphabetical order):\r\n\r\n* Rob Dawson (ephox-rob/[rojotek](http://github.com/rojotek \"rojotek at GitHub\"))\r\n* Bo Frederiksen ([bofrede](http://github.com/bofrede \"bofrede at GitHub\"))\r\n* Johannes Gorset ([jgorset](http://github.com/jgorset \"jgorset at GitHub\"))\r\n* Carson McDonald ([carsonmcdonald](http://github.com/carsonmcdonald \"carsonmcdonald at GitHub\"))\r\n* Sam X ([dtjm](http://github.com/dtjm \"dtjm at GitHub\"))\r\n* Robert Pitts ([rbxbx](http://github.com/rbxbx \"rbxbx at GitHub\"))\r\n* Matt Sanders ([nextmat](http://github.com/nextmat \"nextmat at GitHub\"))\r\n\r\n<a name=\"license\"></a>License\r\n=============================\r\n\r\nReleased under the [MIT License](http://htty.github.com/file.License.html).\r\n","tagline":"A console application for interacting with web servers"}